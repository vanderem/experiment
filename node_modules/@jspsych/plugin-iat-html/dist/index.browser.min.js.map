{"version":3,"file":"index.browser.min.js","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\n  \"name\": \"@jspsych/plugin-iat-html\",\n  \"version\": \"2.1.0\",\n  \"description\": \"jsPsych plugin for running an IAT (Implicit Association Test) with an HTML-formatted stimulus\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jspsych/jsPsych.git\",\n    \"directory\": \"packages/plugin-iat-html\"\n  },\n  \"author\": \"Kristin Diep\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jspsych/jsPsych/issues\"\n  },\n  \"homepage\": \"https://www.jspsych.org/latest/plugins/iat-html\",\n  \"peerDependencies\": {\n    \"jspsych\": \">=7.1.0\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.0\",\n    \"@jspsych/test-utils\": \"^1.2.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"iat-html\",\n  version: version,\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** Key press that is associated with the `left_category_label`. */\n    left_category_key: {\n      type: ParameterType.KEY,\n      default: \"e\",\n    },\n    /** Key press that is associated with the `right_category_label`. */\n    right_category_key: {\n      type: ParameterType.KEY,\n      default: \"i\",\n    },\n    /** An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left\n     * side of the page. */\n    left_category_label: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [\"left\"],\n    },\n    /** An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right\n     * side of the page. */\n    right_category_label: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [\"right\"],\n    },\n    /** This array contains the characters the participant is allowed to press to move on to the next trial if their key\n     * press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the\n     * user to select the right key to move forward.  */\n    key_to_move_forward: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** If `true`, then `html_when_wrong` and `wrong_image_name` is required. If `false`, `trial_duration` is needed\n     *  and trial will continue automatically. */\n    display_feedback: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** The content to display when a user presses the wrong key. */\n    html_when_wrong: {\n      type: ParameterType.HTML_STRING,\n      default: '<span style=\"color: red; font-size: 80px\">X</span>',\n    },\n    /** Instructions about making a wrong key press and whether another key press is needed to continue. */\n    bottom_instructions: {\n      type: ParameterType.HTML_STRING,\n      default: \"<p>If you press the wrong key, a red X will appear. Press any key to continue.</p>\",\n    },\n    /** If this is `true` and the user presses the wrong key then they have to press the other key to continue. An example\n     * would be two keys 'e' and 'i'. If the key associated with the stimulus is 'e' and key 'i' was pressed, then\n     * pressing 'e' is needed to continue the trial. When this is `true`, then parameter `key_to_move_forward`\n     * is not used. If this is `true` and the user presses the wrong key then they have to press the other key to\n     * continue. An example would be two keys 'e' and 'i'. If the key associated with the stimulus is 'e' and key\n     * 'i' was pressed, then pressing 'e' is needed to continue the trial. When this is `true`, then parameter\n     * `key_to_move_forward` is not used. */\n    force_correct_key_press: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Either 'left' or 'right'. This indicates whether the stimulus is associated with the key press and\n     * category on the left or right side of the page (`left_category_key` or `right_category_key`). */\n    stim_key_association: {\n      type: ParameterType.SELECT,\n      options: [\"left\", \"right\"],\n      default: undefined,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the `trial_duration` parameter). If false, then the trial will\n     * continue until the value for `trial_duration` is reached. You can use this parameter to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as `null` for the trial and the trial will end. If the value of this parameter is `null`, then\n     * the trial will wait for a response indefinitely. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n  },\n  data: {\n    /** The string containing the HTML-formatted content that the participant saw on this trial. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n    },\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** Boolean indicating whether the user's key press was correct or incorrect for the given stimulus. */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response.  */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n  // prettier-ignore\n  citations: '__CITATIONS__',\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin runs a single trial of the [implicit association test (IAT)](https://implicit.harvard.edu/implicit/iatdetails.html), using HTML content as the stimulus.\n *\n * @author Kristin Diep\n * @see {@link https://www.jspsych.org/latest/plugins/iat-html/ iat-html plugin documentation on jspsych.org}\n */\nclass IatHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html_str = \"\";\n\n    html_str +=\n      \"<div style='position: absolute; height: 20%; width: 100%; margin-left: auto; margin-right: auto; top: 42%; left: 0; right: 0'><p id='jspsych-iat-stim'>\" +\n      trial.stimulus +\n      \"</p></div>\";\n\n    html_str += \"<div id='trial_left_align' style='position: absolute; top: 18%; left: 20%'>\";\n\n    if (trial.left_category_label.length == 1) {\n      html_str +=\n        \"<p>Press \" +\n        trial.left_category_key +\n        \" for:<br> \" +\n        trial.left_category_label[0].bold() +\n        \"</p></div>\";\n    } else {\n      html_str +=\n        \"<p>Press \" +\n        trial.left_category_key +\n        \" for:<br> \" +\n        trial.left_category_label[0].bold() +\n        \"<br>\" +\n        \"or<br>\" +\n        trial.left_category_label[1].bold() +\n        \"</p></div>\";\n    }\n\n    html_str += \"<div id='trial_right_align' style='position: absolute; top: 18%; right: 20%'>\";\n\n    if (trial.right_category_label.length == 1) {\n      html_str +=\n        \"<p>Press \" +\n        trial.right_category_key +\n        \" for:<br> \" +\n        trial.right_category_label[0].bold() +\n        \"</p></div>\";\n    } else {\n      html_str +=\n        \"<p>Press \" +\n        trial.right_category_key +\n        \" for:<br> \" +\n        trial.right_category_label[0].bold() +\n        \"<br>\" +\n        \"or<br>\" +\n        trial.right_category_label[1].bold() +\n        \"</p></div>\";\n    }\n\n    html_str +=\n      \"<div id='wrongImgID' style='position:relative; top: 300px; margin-left: auto; margin-right: auto; left: 0; right: 0'>\";\n\n    if (trial.display_feedback === true) {\n      html_str +=\n        \"<div id='wrongImgContainer' style='visibility: hidden; position: absolute; top: -75px; margin-left: auto; margin-right: auto; left: 0; right: 0'><p>\" +\n        trial.html_when_wrong +\n        \"</p></div>\";\n      html_str += \"<div>\" + trial.bottom_instructions + \"</div>\";\n    } else {\n      html_str += \"<div>\" + trial.bottom_instructions + \"</div>\";\n    }\n\n    html_str += \"</div>\";\n\n    display_element.innerHTML = html_str;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n      correct: false,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n        correct: response.correct,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var leftKeyCode = trial.left_category_key;\n    var rightKeyCode = trial.right_category_key;\n\n    // function to handle responses by the subject\n    const after_response = (info: { key: string; rt: number }) => {\n      var wImg = document.getElementById(\"wrongImgContainer\");\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-iat-stim\").className += \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response.key = info.key;\n        response.rt = info.rt;\n      }\n\n      if (trial.stim_key_association == \"right\") {\n        if (\n          response.rt !== null &&\n          this.jsPsych.pluginAPI.compareKeys(response.key, rightKeyCode)\n        ) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [trial.right_category_key],\n              });\n            } else {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      } else if (trial.stim_key_association == \"left\") {\n        if (response.rt !== null && this.jsPsych.pluginAPI.compareKeys(response.key, leftKeyCode)) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [trial.left_category_key],\n              });\n            } else {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      }\n    };\n\n    // start the response listener\n    if (trial.left_category_key != \"NO_KEYS\" && trial.right_category_key != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.left_category_key, trial.right_category_key],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null && trial.response_ends_trial != true) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const key = this.jsPsych.pluginAPI.getValidKey([\n      trial.left_category_key,\n      trial.right_category_key,\n    ]);\n    const correct =\n      trial.stim_key_association == \"left\"\n        ? key == trial.left_category_key\n        : key == trial.right_category_key;\n\n    const default_data = {\n      stimulus: trial.stimulus,\n      response: key,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      correct: correct,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.response !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n\n    const cont_rt = data.rt == null ? trial.trial_duration : data.rt;\n\n    if (trial.force_correct_key_press) {\n      if (!data.correct) {\n        this.jsPsych.pluginAPI.pressKey(\n          trial.stim_key_association == \"left\" ? trial.left_category_key : trial.right_category_key,\n          cont_rt + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true)\n        );\n      }\n    } else {\n      this.jsPsych.pluginAPI.pressKey(\n        this.jsPsych.pluginAPI.getValidKey(trial.key_to_move_forward),\n        cont_rt + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true)\n      );\n    }\n  }\n}\n\nexport default IatHtmlPlugin;\n"],"names":["version"],"mappings":"4CAEEA,IAAAA,EAAW,uqCCgHA,UAAA,iuBAAe"}